pred
table(pred=pred,actual=dat[test,]$y)
q()
set.seed(2)
x=(rnorm(100),ncol=2)
x=matrix(rnorm(100),ncol=2)
x[1:25,1]=x[1:25,1]+3;
x[1:25,2]=x[1:25,2]-4;
plot(x)
?kmeans
km.out=kmeans(x,2,nstart=10000)
names(km.out)
km.out$clusters
km.out$cluster
plot(x,col=(km.out$cluster+1))
km.out$tot.withinss
km.out=kmeans(x,4,nstart=10000)
km.out$tot.withinss
km.out=kmeans(x,6,nstart=10000)
km.out$tot.withinss
hc.com=hclust(dist(x),method="complete")
hc.avg=hclust(dist(x),method="average")
hc.sin=hclust(dist(x),method="single")
par(mfrow=c(1,3))
plot(hc.com)
plot(hc.avg)
plot(hc.sin)
names(hc.com)
cutree(hc.com,2)
cutree(hc.avg,2)
cutree(hc.sin,2)
q()
.libPaths( c( "C:/Users/ankit singh/Documents/R/win-library/3.4", .libPaths()) )
install.packages("ggplot2")
library(ggplot2)
data(iris)
head(iris)
myPr=prcomp(iris[,-5],data=iris)
myPr=prcomp(iris[,-5],scale=TRUE))
myPr=prcomp(iris[,-5],scale=TRUE)
myPr=prcomp(iris[,-5],scale=TRUE)
plot(iris$Sepal.length,iris$Sepal.width)
myPr
myPr$x
summary(myPr)
plot(myPr,type="l")
biplot(myPr,scale=0)
head(iris)
plot(iris$Sepal.Length,iris$Sepal.Width)
plot(scale(iris$Sepal.Length),scalke(iris$Sepal.Width))
plot(scale(iris$Sepal.Length),scale(iris$Sepal.Width))
biplot(myPr,scale=0)
myprdata=cbind(iris,myPr$x[1:2])
head(myprdata)
cor(iris[,-5),myprdata[6:7])
cor(iris[,-5],myprdata[6:7])
myprdata=cbind(iris,myPr$x[1:2,])
head(myprdata)
myprdata=cbind(iris,myPr$x[,1:2])
head(myprdata)
cor(iris[,-5],myprdata[6:7])
ggplot(myprdata,aes(PC1,PC2,col=Species
))
ggplot(myprdata,aes(PC1,PC2,col=Species,fill=Species))
?ggplot
ggplot(myprdata,aes(PC1,PC2,col=Species,fill=Species))+stat_ellipse(geon="polygon",col="black",alpha=0.5)
ggplot(myprdata,aes(PC1,PC2,col=Species,fill=Species))+stat_ellipse(geon="polygon",col="black",alpha=0.5)+geom_point(shape=21,col=black)
ggplot(myprdata,aes(PC1,PC2,col=Species,fill=Species))+stat_ellipse(geom="polygon",col="black",alpha=0.5)+geom_point(shape=21,col=black)
ggplot(myprdata,aes(PC1,PC2,col=Species,fill=Species))+stat_ellipse(geom="polygon",col="black",alpha=0.5)+geom_point(shape=21,col="black")
ggplot(myprdata,aes(PC1,PC2,col=Species,fill=Species))+geom_point(shape=21,col="black")
?geom_point
r<-lm(Species~.,data=iris)
Species=as.factor(Species)
iris$Species=as.factor(iris$Species)
r<-lm(Species~.,data=iris)
iris
str(iris)
r<-glm(Species~.,data=iris,family=binomial)
r<-lda(Species~.,data=iris,family=binomial)
r<-glm(Species~.,data=iris,family=binomial))
library(MASS)
r<-lda(Species~.,data=iris,family=binomial))
r<-lda(Species~.,data=iris,family=binomial)
summary(r)
r
attach(myprdata)
glm.fit=glm(Species~PC1+PC2,data=myprdata,family=binomial)
glm.fit=glm(Species~PC1+PC2,data=myprdata,family=binomial,control = list(maxit = 50))
glm.fit=glm(Species~.,data=myprdata,family=binomial,control = list(maxit = 50))
glm.fit=glm(Species~.,data=iris,family=binomial))
glm.fit=glm(Species~.,data=iris,family=binomial)
install.packages("logistif")
install.packages("logistf")
require(logistf)
library(logistf)
?logistf
.libPaths( c( "C:/Users/ankit singh/Documents/R/win-library/3.4", .libPaths()) )
install.packages("logistf")
library(logistf)
q()
.libPaths()
.libPaths(c(C:/users/ankit singh/Documents/R/win-library/3.4,C:/Program Files/R/R-3.4.3/library))
.libPaths(c(C:users/ankit singh/Documents/R/win-library/3.4,C:/Program Files/R/R-3.4.3/library))
.libPaths(c(C:users/ankit singh/Documents/R/win-library/3.4,C:/Program Files/R/R-3.4.3/library)
.libPaths(c(C:Users/ankit singh/Documents/R/win-library/3.4,C:/Program Files/R/R-3.4.3/library)
.libPaths(c(C:/Users/ankit singh/Documents/R/win-library/3.4,C:/Program Files/R/R-3.4.3/library)
.libPaths(c(C:/Users/ankit singh/Documents/R/win-library/3.4,C:/Program Files/R/R-3.4.3/library)
.libPaths(c("C:/Users/ankit singh/Documents/R/win-library/3.4","C:/Program Files/R/R-3.4.3/library)")
)
.libPatjhs()
.libPaths()
install.packages("neuralnet")
library(neuralnet)
?neuralnet
?infert
nn=neuralnet(case~age+parity+induced+spontaneous,data=infert,hidden=2,err.fct="ce",linear.output=FALSE)
nn
plot(nn)
n$weights
nn$weights
nn$esult.matrix
nn$esult.matrix[[1]]
nn$result.matrix[[1]]
nn$result.matrix
nn$net.result
nn1=ifelse(nn$net.result>0.5,1,0)
nn1=ifelse(nn$net.result>0.5,1.0,0.0)
nn$covariate
nn$net.result[[1]]
nn1=ifelse(nn$net.result[[1]]>0.5,1.0,0.0)
misclass=mean(infert$case,nn1)
misclass=mean(infert$case!=nn1)
misclass
nn=neuralnet(case~age+parity+induced+spontaneous,data=infert,hidden=2,learningrate=0.01,algorith="backdrop",err.fct="ce",linear.output=FALSE)
nn=neuralnet(case~age+parity+induced+spontaneous,data=infert,hidden=2,learningrate=0.01,algorithm="backdrop",err.fct="ce",linear.output=FALSE)
nn=neuralnet(case~age+parity+induced+spontaneous,data=infert,hidden=2,learningrate=0.01,algorithm="backprop",err.fct="ce",linear.output=FALSE)
nn
nn.result.matrix
nn$result.matrix
nn$net.result
nn$net.result[[1]]
nn$net.result
nn$net.result
p<-cbind(nn$net.result,nn$net.result[[1]])
p
plot(nn)
covariate=matrix(c(22,1,0,0,
22,1,1,0,
22,1,0,1,
22,1,1,1),
byrow=TRUE,ncol=4)
covariate
nn.pred=compute(nn,covariate)
nn.net$result
nn$net.result
nn.ped$net.result
nn.pred$net.result
nn=neuralnet(case~age+parity+induced+spontaneous,data=infert,hidden=2,err.fct="ce",linear.output=FALSE)
nn.pred=compute(nn,covariate)
nn.pred$net.result
ci=confidence.interval(nn,alpha=0.5)
ci
par(mfrow=c(2,2))
gwplot(nn,select.covariate="age",min=2.5,max=5)
?gwplot
par(mfrow=c(2,2))
gwplot(nn,select.covariate="age",min=2.5,max=5)
gwplot(nn,select.covariate="parity",min=2.5,max=5)
gwplot(nn,select.covariate="induced",min=2.5,max=5)
gwplot(nn,select.covariate="spontaneous",min=2.5,max=5)
par(mfrow=c(2,2))
gwplot(nn,selected.covariate="age",min=2.5,max=5)
gwplot(nn,selected.covariate="parity",min=2.5,max=5)
gwplot(nn,selected.covariate="induced",min=2.5,max=5)
gwplot(nn,selected.covariate="spontaneous",min=2.5,max=5)
par(mfrow=c(2,2))
gwplot(nn,selected.covariate="age",min=-2.5,max=5)
gwplot(nn,selected.covariate="parity",min=2.5,max=5)
gwplot(nn,selected.covariate="induced",min=2.5,max=5)
gwplot(nn,selected.covariate="spontaneous",min=2.5,max=5)
q()
.libPaths( c( "C:/Users/ankit singh/Documents/R/win-library/3.3", .libPaths()) )
library(DMvR)
install.packages("DMvR")
.libPaths( c( "C:/Users/ankit singh/Documents/R/win-library/3.4", .libPaths()) )
install.packages("DMvR")
utils:::menuInstallLocal()
utils:::menuInstallPkgs()
library(DMwR)
data(algae)
head(algae)
complete.cases(algae)
complete.cases(algae,0.2)
nrow[!complete.cases(algae)]
nrow(algae[!complete.cases(algae),])
manyNAs(algae,0.2)
algae[-manyNAs(algae,0.2),]
nrow(algae)
algae=algae[-manyNAs(algae,0.2),]
nrow(algae)
fix(algae)
>\?cor
?cor
symnum(cor(algae[,4:18],use="everything"))
symnum(cor(algae[,4:18],use="complete.obs"))
data(algae)
nrow(algae)
algae[-manyNAs(algae,0.2),]
algae=algae[-manyNAs(algae,0.2),]
lm(PO4~oPO4,data=algae)
?knn.Imputation
??knn.Imputation
require(imputation)
??knnImputation
algae<-knnImputation(algae,k=10,meth="median")
fix(algae)
base
library(plyr)
library(dplyr)
library(lubridate)
base
q()
.libPaths( c( "C:/Users/ankit singh/Documents/R/win-library/3.4", .libPaths()) )
irisdata=read.csv("C:\Users\ankit singh\Desktop\irisdata.csv")
irisdata=read.csv("C:/Users/ankit singh/Desktop/irisdata.csv")
irisdata
dim(irisdata)
pairs(irisdata)
names(irisdata)
str(irisdata)
summary(irisdata)
iris<-irisdata
colnames(iris)<-c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width","Species")
head(iris)
set.sedd(2)
set.seed(2)
traindata=sample(1:149,0.8*149)
testdata=-traindata
test=iris[test,]
test=iris[testdata,]
train=iris[traindata,]
head(testdata)
head(test)
head(train)
par(mfrow=c(1,4))
  for(i in 1:4) {
  boxplot(trainset[,i], main=names(trainset)[i])
}
par=(mfrow=c(1,4))
for(i in 1:4){
  boxplot(train[,i], main=names(train)[i])
}
setosa=train(iris$Species=Iris-setosa)
setosa=train[iris$Species=Iris-setosa
train
train[,Species=Iris-setosa]
train[,Species]
train[,species]
train[,Species="Iris-setosa"]
?tree
install.packages("tree")
tree.model=tree(Species~.,data=train)
library(tree)
tree.model=tree(Species~.,data=train)
plot(tree.model)
text(tree.model,pretty=0)
pred.model=predict(tree.model,newdata=test,type="class")
table(pred.model,iris$Species)
table(pred.model,train$Species)
table(pred.model,test$Species)
mean(pred.model!=test$Species)
set.seed(2)
cv_tree=cv.tree(tree.model,FUN=misclass)
?cv.tree
cv_tree=cv.tree(tree.model,FUN=prune.misclass)
plot(cv_tree)
plot(cv_tree$size,cv_tree$dev,type="b")
pruned_model=prune.misclass(tree.model,best=3)
pred.prune.model=predict(pruned.model,newdata=test,type="class")
pred.prune.model=predict(pruned_model,newdata=test,type="class")
table(pred.prune.model,test$Species)
mean(pred.prune.model!=test$Species)
inatll.packages("randomForest")
install.packages("randomForest")
install.packages("gbm")
require(gbm)
require(randomForest)
?randomFores
?randomForest
MSE.rf=rep(0,4)
for(d in 1:4){
rf.model=randomForest(Species~.,data=train,mtry=d,importance=T)
rf.pred=predict(rf.model,newdata=test)
mean(rf.pred!=test$Species)
}
mtry=c(1:4)
plot(mtry,MSE.rf=rep(0,4)
for(d in 1:4){
rf.model=randomForest(Species~.,data=train,mtry=d,importance=T)
rf.pred=predict(rf.model,newdata=test)
MSE.rf[d]=mean(rf.pred!=test$Species)
}
MSE.rf=rep(0,4)
for(d in 1:4){
rf.model=randomForest(Species~.,data=train,mtry=d,importance=T)
rf.pred=predict(rf.model,newdata=test)
MSE.rf[d]=mean(rf.pred!=test$Species)
}
plot(mtry,MSE.rf)
MSE.rf
boost.model=gbm(Species~.,data=train,distribution="bernulli",ntree=5000,interaction.depth2=2,shrinkage=0.01)
boost.model=gbm(Species~.,data=train,distribution="bernulli",ntree=5000,interaction.depth=2,shrinkage=0.01)
boost.model=gbm(Species~.,data=train,distribution="bernulli",n.tree=5000,interaction.depth=2,shrinkage=0.01)
?gbm
boost.model=gbm(Species~.,data=train,distribution="bernoulli",n.tree=5000,interaction.depth=2,shrinkage=0.01)
boost.model=gbm(Species~.,data=train,distribution="multinomial",n.tree=5000,interaction.depth=2,shrinkage=0.01)
summary(boost.model)
boost.pred=predict(boost.model,newdata=test)
boost.pred=predict(boost.model,newdata=test,n.tree=5000)
mean(test$Species!=boost.pred)
boost.pred
boost.pred.val=boost.pred[,max(c(1:3))]
lda.fit=lda(Species~.,data=train)
require(MASS)
lda.fit=lda(Species~.,data=train)
lda.pred=predict(lda.fit,newdata=test)
mean(lda.pred!=iris$Species)
lda.fit=lda(Species~.,data=train,,amily="binomial"))
lda.fit=lda(Species~.,data=train,,amily="binomial")
lda.fit=lda(Species~.,data=train,,family="binomial")
lda.fit=lda(Species~.,data=train,,family=binomial)
?lda
iris$Species=as.factor(iris$Species)
test=iris[,testdata]
train=iris[,traindata]
train=iris[,trainingdata]
ls
ls()
train=iris[traindata,]
test=iris[testdata,]
lda.fit=lda(Species~.,data=train,family=binomial)
lda.pred=predict(lda.fit,newdata=test)
mean(lda.pred!test$Species)
mean(lda.pred!=test$Species)
test$Species
lda.pred
head(test)
head(train)
lda.pred=predict(lda.fit,newdata=test,type=binomial)
lda.pred=predict(lda.fit,newdata=test)
mean(lda.pred!=test$Species)
lda.pred
lda.fit=lda(Species~.,data=train,family=binomial)
lda.pred=predict(lda.fit,newdata=test,type=response)
mean(lda.pred!=test$Species)
lda.pred
lda.pred
mean(lda.pred$class!=test$Species)
boost.model
boost.pred
table(lda.pred$class,test$Species)
table(rf.pred,test$Species)
install.packages("kmeans")
install.packages("kmean")
set.seed(2)
kmeans.model=kmeans(train[,1:4],3,nstart=20)
kmeans
kmeans.model
kmeans.predict=predict(kmeans.model,newdata=test)
names(kmeans.model)
kmeans.model$cluster
kmeans.model$cluster==test$Species
table(kmeans.model$cluster,test$Species)
table(kmeans.model$cluster,train$Species)
boost.pred
table(boost.pred,test$Species)
names(boost.pred)'
names(boost.pred)'
names(boost.pred)
pred=as.matrix(boost.pred[,,1])
table(pred,test$Species)
pred
pred$new_col<-colname(max(pred$Iris-setosa,pred$Iris-versicolor,pred$Iris-virginica))
pred$new_col<-colnames(max(pred$Iris-setosa,pred$Iris-versicolor,pred$Iris-virginica))
which.max(pred=as.matrix(probs.var.multinom[,,1])
which.max(max(pred$Iris-setosa,pred$Iris-versicolor,pred$Iris-virginica)))
which.max(max(pred$Iris-setosa,pred$Iris-versicolor,pred$Iris-virginica))
p.predBST <- apply(pred, 1, which.max)
p.predBST
?apply
table(p.predBST,test$Species)
mean(p.predBST!=test$Species)
lda.pred
mean(lda.pred.class$test$Species)
mean(lda.pred$class$test$Species)
mean(lda.pred$class!=test$Species)
q()
data(iris)
barplot(iris$Petal.Length)
iris$Sepal.Length
iris
barplot(iris$Sepal.Width,col=(iris$Sepal.Width))
barplot(iris$Sepal.Width,col=(iris$Species))
table(iris$Sepal.Width,iris$Species)
barplot(table(iris$Sepal.Width,iris$Species),col=brewer.pal(3,"Set1"))
barplot(table(iris$Sepal.Width,iris$Species))
barplot(table(iris$Sepal.Width,iris$Species))
barplot(table(iris$Species,iris$Sepal.Width))
iris$Sepal.Length~iris$Species
boxplot(iris$Sepal.Length~iris$Species)
table(iris$Sepal.Length,iris$Species)
table(iris$Sepal.Length,iris$Species,iris$Species)
table(iris$Species,iris$Sepal.Length)
boxplot(table(iris$Species,iris$Sepal.Length))
table(iris$Sepal.Length,iris$Species,iris$Species)
boxplot(table(iris$Species,iris$Sepal.Length))
boxplot(table(iris$Species,iris$Sepal.Length))
boxplot(iris$Sepal.Length~iris$Species)
library(hexbin)
install.packages("hexbin")
.libPaths( c( "C:/Users/ankit singh/Documents/R/win-library/3.4", .libPaths()) )
install.packages("hexbin")
data(diamonds)
a=hexbin(iris$Sepal.Width,iris$Species,xbins=10)
library(hexbin)
a=hexbin(iris$Sepal.Width,iris$Species,xbins=10)
plot(a)
mtcars
data(mtcars)
data
b<as.matrix(mtcars)
b<-as.matrix(mtcars)
b
heatmap(mtcars)
heatmap(b)
image(as.matrix(b[2:7]))
q()
getwd()
setwd("F:/r_git_upload/univariate")
getwd()
Walmart<-read.csv("F://r_git_upload//univariate//data//Walmart.csv")
Walmart
Walmart_ts=ts(Walmart$Values,start=c(2011,1),end=c(2014,6),frequency=12)
Walmart_ts
plot(decompose(Walmart_ts))
adf.test(diff((Walmart)), alternative="stationary", k=0)
?adf
??adf
.libPaths( c( "C:\Users\ankit singh\Documents\R\win-library\3.4" , .libPaths() ) )
.libPaths( c( "C:/Users/ankit singh/Documents/R/win-library/3.4" , .libPaths() ) )
utils:::menuInstallPkgs()
adf.test(diff((Walmart_ts)), alternative="stationary", k=0)
library(tseries)
adf.test(diff((Walmart_ts)), alternative="stationary", k=0)
adf.test(((Walmart_ts)), alternative="stationary", k=0)
datatsdiff=diff(Walmart_ts)
plot(datatsdiff)
acf(datatsdiff, lag.max=20)
acf(datatsdiff, lag.max=20, plot=FALSE)
auto.arima(diff(Walmart_ts))
pacf(datatsdiff, lag.max=20)
pacf(datatsdiff, lag.max=20, plot=FALSE)
acf(datatsdiff, lag.max=20)
library(forecast)
auto.arima(datatsdiff)
auto.arima(Walmart_ts)
arima(Walmart_ts, order=c(2,1,2)) #aic=511.62
arima(Walmart_ts, order=c(0,1,0)) #aic=527.55
arima(Walmart_ts, order=c(1,1,0)) #aic=512.38
arima(Walmart_ts, order=c(0,1,1)) #aic=512.38
arima(Walmart_ts, order=c(0,1,1)) #aic=512.38auto.arima(datatsdiff)
auto.arima(datatsdiff)
arima(Walmart_ts, order=c(0,1,0))
utils:::menuInstallPkgs()
library(forecast)
datatsarima <- arima(Walmart_ts, order=c(0,1,0))
datatsforecasts <- forecast.Arima(datatsarima, h=1*6)
datatsforecasts <- forecast.arima(datatsarima, h=1*6)
datatsarima 
datatsarima 
datatsforecasts <- forecast.Arima(datatsarima, h=1*6)
datatsforecasts <- forecast(datatsarima, h=1*6)
datatsforecasts 
plot.forecast(datatsforecasts)
plot(datatsforecasts)
Walmart<-read.csv("F://r_git_upload//univariate//data//Walmart.csv") #Reading data
Walmart #View data
Walmart_ts=ts(Walmart$Values,start=c(2011,1),end=c(2014,6),frequency=12) #Convering dataset to timeseries format
Walmart_ts #View time series format
plot(decompose(Walmart_ts)) #Plot trends,cycles in time series data
library(tseries)
adf.test(((Walmart_ts)), alternative="stationary", k=0) #Finding degree of differencing)
adf.test(diff((Walmart_ts)), alternative="stationary", k=0) #p=0.01 hence acceepted and value of d=1;
datatsdiff=diff(Walmart_ts) 
plot(datatsdiff)
acf(datatsdiff, lag.max=20)             # plot a correlation
acf(datatsdiff, lag.max=20, plot=FALSE)
pacf(datatsdiff, lag.max=20)             # plot a partial correlation
pacf(datatsdiff, lag.max=20, plot=FALSE)
#From ACF & PACF we can figure out that d is equal to 1
library(forecast)
arima(Walmart_ts, order=c(2,1,2)) #aic=511.62
arima(Walmart_ts, order=c(0,1,0)) #aic=510.55 #Lowest AIC hence selected.
arima(Walmart_ts, order=c(1,1,0)) #aic=512.38
arima(Walmart_ts, order=c(0,1,1)) #aic=512.38
auto.arima(Walmart_ts)//Best model(0,1,0) and further validated
library(forecast)
datatsarima <- arima(Walmart_ts, order=c(0,1,0))
datatsforecasts <- forecast(datatsarima, h=1*6) #Forecasting
plot(datatsforecasts)
datatsforecasts
q()
